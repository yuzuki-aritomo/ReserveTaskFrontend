/* tslint:disable */
/* eslint-disable */
/**
 * Rails Reservation Api
 * Reservatin Api Document
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SignInRequest,
    SignInRequestFromJSON,
    SignInRequestToJSON,
    SignInResponse,
    SignInResponseFromJSON,
    SignInResponseToJSON,
    SignOutRequest,
    SignOutRequestFromJSON,
    SignOutRequestToJSON,
    SignOutResponse,
    SignOutResponseFromJSON,
    SignOutResponseToJSON,
    SignUpRequest,
    SignUpRequestFromJSON,
    SignUpRequestToJSON,
    SignUpResponse,
    SignUpResponseFromJSON,
    SignUpResponseToJSON,
} from '../models';

export interface AuthPostRequest {
    signUpRequest?: SignUpRequest;
}

export interface AuthSignInPostRequest {
    signInRequest?: SignInRequest;
}

export interface AuthSignOutPostRequest {
    signOutRequest?: SignOutRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * 新規登録
     */
    async authPostRaw(requestParameters: AuthPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SignUpResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpRequestToJSON(requestParameters.signUpRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignUpResponseFromJSON(jsonValue));
    }

    /**
     * 新規登録
     */
    async authPost(requestParameters: AuthPostRequest, initOverrides?: RequestInit): Promise<SignUpResponse> {
        const response = await this.authPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログイン
     */
    async authSignInPostRaw(requestParameters: AuthSignInPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SignInResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign_in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestToJSON(requestParameters.signInRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignInResponseFromJSON(jsonValue));
    }

    /**
     * ログイン
     */
    async authSignInPost(requestParameters: AuthSignInPostRequest, initOverrides?: RequestInit): Promise<SignInResponse> {
        const response = await this.authSignInPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログアウト
     */
    async authSignOutPostRaw(requestParameters: AuthSignOutPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SignOutResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign_out`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignOutRequestToJSON(requestParameters.signOutRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SignOutResponseFromJSON(jsonValue));
    }

    /**
     * ログアウト
     */
    async authSignOutPost(requestParameters: AuthSignOutPostRequest, initOverrides?: RequestInit): Promise<SignOutResponse> {
        const response = await this.authSignOutPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
