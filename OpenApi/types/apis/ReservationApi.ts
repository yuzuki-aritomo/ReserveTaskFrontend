/* tslint:disable */
/* eslint-disable */
/**
 * Rails Reservation Api
 * Reservatin Api Document
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Reservation,
    ReservationFromJSON,
    ReservationToJSON,
    Reservations,
    ReservationsFromJSON,
    ReservationsToJSON,
} from '../models';

export interface ReservationsGetRequest {
    start?: Date;
    end?: Date;
}

export interface ReservationsOpeningsGetRequest {
    start?: Date;
    end?: Date;
}

export interface ReservationsReservationIdDeleteRequest {
    reservationId: number;
}

export interface ReservationsReservationIdGetRequest {
    reservationId: number;
}

export interface ReservationsReservationIdPostRequest {
    reservationId: number;
}

/**
 * 
 */
export class ReservationApi extends runtime.BaseAPI {

    /**
     * 予約完了一覧取得
     */
    async reservationsGetRaw(requestParameters: ReservationsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Reservations>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsFromJSON(jsonValue));
    }

    /**
     * 予約完了一覧取得
     */
    async reservationsGet(requestParameters: ReservationsGetRequest, initOverrides?: RequestInit): Promise<Reservations> {
        const response = await this.reservationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 予約可能一覧取得
     */
    async reservationsOpeningsGetRaw(requestParameters: ReservationsOpeningsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Reservations>> {
        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString();
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservations/openings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsFromJSON(jsonValue));
    }

    /**
     * 予約可能一覧取得
     */
    async reservationsOpeningsGet(requestParameters: ReservationsOpeningsGetRequest, initOverrides?: RequestInit): Promise<Reservations> {
        const response = await this.reservationsOpeningsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 予約キャンセル
     */
    async reservationsReservationIdDeleteRaw(requestParameters: ReservationsReservationIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling reservationsReservationIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservations/{reservation_id}`.replace(`{${"reservation_id"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * 予約キャンセル
     */
    async reservationsReservationIdDelete(requestParameters: ReservationsReservationIdDeleteRequest, initOverrides?: RequestInit): Promise<Reservation> {
        const response = await this.reservationsReservationIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 予約詳細情報取得
     */
    async reservationsReservationIdGetRaw(requestParameters: ReservationsReservationIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling reservationsReservationIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservations/{reservation_id}`.replace(`{${"reservation_id"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * 予約詳細情報取得
     */
    async reservationsReservationIdGet(requestParameters: ReservationsReservationIdGetRequest, initOverrides?: RequestInit): Promise<Reservation> {
        const response = await this.reservationsReservationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 予約登録
     */
    async reservationsReservationIdPostRaw(requestParameters: ReservationsReservationIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling reservationsReservationIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservations/{reservation_id}`.replace(`{${"reservation_id"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * 予約登録
     */
    async reservationsReservationIdPost(requestParameters: ReservationsReservationIdPostRequest, initOverrides?: RequestInit): Promise<Reservation> {
        const response = await this.reservationsReservationIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
